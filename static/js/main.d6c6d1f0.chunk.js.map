{"version":3,"sources":["types/ActionFilterType.ts","features/currentTodo.ts","features/filter.ts","types/Status.ts","features/todos.ts","app/store.ts","app/hooks.ts","components/TodoList/TodoList.tsx","components/TodoFilter/TodoFilter.tsx","api.ts","components/Loader/Loader.tsx","components/TodoModal/TodoModal.tsx","App.tsx","index.tsx"],"names":["ActionFilterType","actions","todo","type","payload","currentTodoReducer","state","action","StatusType","initialState","query","status","QuerySet","StatusSet","QueryClear","filterReducer","todos","todosReducer","rootReducer","combineReducers","currentTodo","filter","store","createStore","composeWithDevTools","applyMiddleware","thunk","useAppDispatch","useDispatch","useAppSelector","useSelector","TodoList","dispatch","length","className","filteredTodos","Active","completed","Completed","All","trim","title","toLowerCase","includes","filterTodos","map","classNames","id","onClick","currentTodActions","handleTodoClick","TodoFilter","onSubmit","event","preventDefault","onChange","actionsFilter","target","value","placeholder","style","pointerEvents","get","url","delay","fullURL","Promise","resolve","setTimeout","then","fetch","res","json","Loader","TodoModal","useState","currentUser","setCurrentUser","getUserFromServer","a","userId","userFromServer","Error","useEffect","currentTodoActions","href","email","name","App","isLoading","setIsLoading","getTodosFromServer","todosFromServer","todosActions","Root","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.d6c6d1f0.chunk.js","sourcesContent":["export enum ActionFilterType {\n  QuerySet = 'query/SET',\n  QueryClear = 'query/CLEAR',\n  StatusSet = 'status/SET',\n}\n","import { Todo } from '../types/Todo';\n\ntype RemoveTodoAction = { type: 'currentTodo/REMOVE' };\n\ntype SetTodoAction = {\n  type: 'currentTodo/SET';\n  payload: Todo;\n};\n\nconst removeTodo = (): RemoveTodoAction => ({ type: 'currentTodo/REMOVE' });\n\nconst setTodo = (todo: Todo): SetTodoAction => ({\n  type: 'currentTodo/SET',\n  payload: todo,\n});\n\nexport const actions = { setTodo, removeTodo };\n\ntype State = Todo | null;\ntype Action = SetTodoAction | RemoveTodoAction;\n\nconst currentTodoReducer = (\n  state: State = null,\n  action: Action,\n): State => {\n  switch (action.type) {\n    case 'currentTodo/SET':\n      return action.payload;\n\n    case 'currentTodo/REMOVE':\n      return null;\n\n    default:\n      return state;\n  }\n};\n\nexport default currentTodoReducer;\n","import { ActionFilterType } from '../types/ActionFilterType';\nimport { Status } from '../types/Status';\n\ntype SetQueryAction = {\n  type: ActionFilterType.QuerySet,\n  payload: string,\n};\n\ntype ClearQueryAction = {\n  type: ActionFilterType.QueryClear,\n};\n\ntype SetStatusAction = {\n  type: ActionFilterType.StatusSet,\n  payload: Status,\n};\n\ntype Action = SetQueryAction\n| SetStatusAction\n| ClearQueryAction;\n\nconst setQueryFilter = (query: string): SetQueryAction => ({\n  type: ActionFilterType.QuerySet,\n  payload: query,\n});\n\nconst clearQueryFilter = (): ClearQueryAction => ({\n  type: ActionFilterType.QueryClear,\n});\n\nconst setStatusFilter = (status: Status): SetStatusAction => ({\n  type: ActionFilterType.StatusSet,\n  payload: status,\n});\n\ntype State = {\n  query: string,\n  status: Status,\n};\n\nconst initialState: State = {\n  query: '',\n  status: 'all',\n};\n\nconst filterReducer = (\n  state = initialState,\n  action: Action,\n) => {\n  switch (action.type) {\n    case ActionFilterType.StatusSet:\n      return { ...state, status: action.payload };\n\n    case ActionFilterType.QuerySet:\n      return { ...state, query: action.payload };\n\n    case ActionFilterType.QueryClear:\n      return { ...state, query: '' };\n\n    default: return state;\n  }\n};\n\nexport const actions = { setQueryFilter, setStatusFilter, clearQueryFilter };\n\nexport default filterReducer;\n","export type Status = 'all' | 'active' | 'completed';\n\nexport enum StatusType {\n  All = 'all',\n  Active = 'active',\n  Completed = 'completed',\n}\n","import { Todo } from '../types/Todo';\n\ntype AddTodosType = {\n  type: 'todo/SET',\n  payload: Todo[],\n};\n\nconst setTodos = (todos: Todo[]): AddTodosType => ({\n  type: 'todo/SET',\n  payload: todos,\n});\n\nconst todosReducer = (todos: Todo[] = [], action: AddTodosType): Todo[] => {\n  switch (action.type) {\n    case 'todo/SET':\n      return action.payload;\n\n    default: return todos;\n  }\n};\n\nexport const actions = { setTodos };\n\nexport default todosReducer;\n","import { createStore, applyMiddleware, combineReducers } from 'redux';\nimport { composeWithDevTools } from 'redux-devtools-extension';\nimport thunk from 'redux-thunk';\n\nimport currentTodoReducer from '../features/currentTodo';\nimport filterReducer from '../features/filter';\nimport todosReducer from '../features/todos';\n\nconst rootReducer = combineReducers({\n  currentTodo: currentTodoReducer,\n  filter: filterReducer,\n  todos: todosReducer,\n});\n\n// The `store` is passed to the Provider in `/src/index.tsx`\nexport const store = createStore(\n  rootReducer,\n  composeWithDevTools(\n    applyMiddleware(thunk),\n  ),\n);\n\nexport type RootState = ReturnType<typeof store.getState>;\nexport type AppDispatch = typeof store.dispatch;\n","import { TypedUseSelectorHook, useDispatch, useSelector } from 'react-redux';\nimport { AppDispatch, RootState } from './store';\n\nexport const useAppDispatch: () => AppDispatch = useDispatch;\nexport const useAppSelector: TypedUseSelectorHook<RootState> = useSelector;\n","import React from 'react';\nimport classNames from 'classnames';\nimport { useAppDispatch, useAppSelector } from '../../app/hooks';\nimport { actions as currentTodActions } from '../../features/currentTodo';\nimport { Todo } from '../../types/Todo';\nimport { StatusType } from '../../types/Status';\n\nexport const TodoList: React.FC = () => {\n  const todos = useAppSelector(state => state.todos);\n  const dispatch = useAppDispatch();\n  const currentTodo = useAppSelector(state => state.currentTodo);\n  const status = useAppSelector(state => state.filter.status);\n  const query = useAppSelector(state => state.filter.query);\n\n  const filterTodos = () => {\n    let filteredTodos: Todo[] = [...todos];\n\n    switch (status) {\n      case StatusType.Active:\n        filteredTodos = filteredTodos.filter(todo => !todo.completed);\n        break;\n\n      case StatusType.Completed:\n        filteredTodos = filteredTodos.filter(todo => todo.completed);\n        break;\n\n      case StatusType.All:\n        break;\n\n      default: break;\n    }\n\n    if (query.trim() !== '') {\n      filteredTodos = filteredTodos.filter(todo => (\n        todo.title.toLowerCase().includes(query.toLowerCase())\n      ));\n    }\n\n    return filteredTodos;\n  };\n\n  const handleTodoClick = (todo: Todo) => {\n    return dispatch(currentTodActions.setTodo(todo));\n  };\n\n  return (\n    <>\n      {todos.length > 0 ? (\n        <table className=\"table is-narrow is-fullwidth\">\n          <thead>\n            <tr>\n              <th>#</th>\n\n              <th>\n                <span className=\"icon\">\n                  <i className=\"fas fa-check\" />\n                </span>\n              </th>\n\n              <th>Title</th>\n              <th> </th>\n            </tr>\n          </thead>\n\n          <tbody>\n            {filterTodos().map(todo => {\n              return (\n                <tr\n                  data-cy=\"todo\"\n                  key={todo.id}\n                  className={classNames({\n                    'has-background-info-light': currentTodo?.id === todo.id,\n                  })}\n                >\n                  <td className=\"is-vcentered\">{todo.id}</td>\n                  <td className=\"is-vcentered\">\n                    {todo.completed && (\n                      <span\n                        className=\"icon\"\n                        data-cy=\"iconCompleted\"\n                      >\n                        <i className=\"fas fa-check\" />\n                      </span>\n                    )}\n                  </td>\n\n                  <td className=\"is-vcentered is-expanded\">\n                    <p\n                      className={classNames({\n                        'has-text-danger': !todo.completed,\n                        'has-text-success': todo.completed,\n                      })}\n                    >\n                      {todo.title}\n                    </p>\n                  </td>\n\n                  <td className=\"has-text-right is-vcentered\">\n                    <button\n                      data-cy=\"selectButton\"\n                      className=\"button\"\n                      type=\"button\"\n                      onClick={() => handleTodoClick(todo)}\n                    >\n                      <span className=\"icon\">\n                        <i\n                          className={classNames('far', {\n                            'fa-eye': currentTodo?.id !== todo.id,\n                            'fa-eye-slash': currentTodo?.id === todo.id,\n                          })}\n                        />\n                      </span>\n                    </button>\n                  </td>\n                </tr>\n              );\n            })}\n          </tbody>\n        </table>\n      ) : (\n        <p className=\"notification is-warning\">\n          There are no todos matching current filter criteria\n        </p>\n      )}\n\n    </>\n  );\n};\n","/* eslint-disable jsx-a11y/control-has-associated-label */\nimport React, { ChangeEvent } from 'react';\nimport { useAppDispatch, useAppSelector } from '../../app/hooks';\nimport { actions, actions as actionsFilter } from '../../features/filter';\nimport { Status } from '../../types/Status';\n\nexport const TodoFilter: React.FC = () => {\n  const dispatch = useAppDispatch();\n\n  const query = useAppSelector(state => state.filter.query);\n\n  const handleTodosFilter = (event: ChangeEvent<HTMLSelectElement>) => {\n    dispatch(actionsFilter.setStatusFilter(event.target.value as Status));\n  };\n\n  const handleInputQuery = (event: ChangeEvent<HTMLInputElement>) => {\n    dispatch(actions.setQueryFilter(event.target.value));\n  };\n\n  const clearSearchQuery = () => {\n    dispatch(actions.clearQueryFilter());\n  };\n\n  return (\n    <form\n      className=\"field has-addons\"\n      onSubmit={event => event.preventDefault()}\n    >\n      <p className=\"control\">\n        <span className=\"select\">\n          <select\n            data-cy=\"statusSelect\"\n            onChange={handleTodosFilter}\n          >\n            <option value=\"all\">All</option>\n            <option value=\"active\">Active</option>\n            <option value=\"completed\">Completed</option>\n          </select>\n        </span>\n      </p>\n\n      <p className=\"control is-expanded has-icons-left has-icons-right\">\n        <input\n          data-cy=\"searchInput\"\n          type=\"text\"\n          className=\"input\"\n          placeholder=\"Search...\"\n          value={query}\n          onChange={handleInputQuery}\n        />\n        <span className=\"icon is-left\">\n          <i className=\"fas fa-magnifying-glass\" />\n        </span>\n\n        <span className=\"icon is-right\" style={{ pointerEvents: 'all' }}>\n          {query && (\n            <button\n              data-cy=\"clearSearchButton\"\n              type=\"button\"\n              className=\"delete\"\n              onClick={clearSearchQuery}\n            />\n          )}\n\n        </span>\n      </p>\n    </form>\n  );\n};\n","import { Todo } from './types/Todo';\nimport { User } from './types/User';\n\n// eslint-disable-next-line max-len\nconst BASE_URL = 'https://mate-academy.github.io/react_dynamic-list-of-todos/api';\n\nfunction wait(delay: number): Promise<void> {\n  return new Promise(resolve => {\n    setTimeout(resolve, delay);\n  });\n}\n\nfunction get<T>(url: string): Promise<T> {\n  // eslint-disable-next-line prefer-template\n  const fullURL = BASE_URL + url + '.json';\n\n  return wait(300)\n    .then(() => fetch(fullURL))\n    .then(res => res.json());\n}\n\nexport const getTodos = () => get<Todo[]>('/todos');\n\nexport const getUser = (userId: number) => get<User>(`/users/${userId}`);\n","import React from 'react';\nimport './Loader.scss';\n\nexport const Loader: React.FC = () => (\n  <div className=\"Loader\" data-cy=\"loader\">\n    <div className=\"Loader__content\" />\n  </div>\n);\n","/* eslint-disable jsx-a11y/control-has-associated-label */\nimport React, { useEffect, useState } from 'react';\nimport { Loader } from '../Loader';\nimport { useAppDispatch, useAppSelector } from '../../app/hooks';\nimport { getUser } from '../../api';\nimport { User } from '../../types/User';\nimport { actions as currentTodoActions } from '../../features/currentTodo';\n\nexport const TodoModal: React.FC = () => {\n  const currentTodo = useAppSelector(state => state.currentTodo);\n  const dispatch = useAppDispatch();\n  const [currentUser, setCurrentUser] = useState<User | null>(null);\n\n  const getUserFromServer = async () => {\n    try {\n      let userFromServer;\n\n      if (currentTodo?.userId) {\n        userFromServer = await getUser(currentTodo.userId);\n\n        setCurrentUser(userFromServer);\n      }\n    } catch (error) {\n      throw new Error('Failed to load user');\n    }\n  };\n\n  useEffect(() => {\n    getUserFromServer();\n  }, []);\n\n  const closeModal = () => {\n    dispatch(currentTodoActions.removeTodo());\n  };\n\n  return (\n    <div className=\"modal is-active\" data-cy=\"modal\">\n      <div className=\"modal-background\" />\n\n      {currentTodo && currentUser ? (\n        <div className=\"modal-card\">\n          <header className=\"modal-card-head\">\n            <div\n              className=\"modal-card-title has-text-weight-medium\"\n              data-cy=\"modal-header\"\n            >\n              {`Todo #${currentTodo.id}`}\n            </div>\n\n            <button\n              type=\"button\"\n              className=\"delete\"\n              data-cy=\"modal-close\"\n              onClick={closeModal}\n            />\n          </header>\n\n          <div className=\"modal-card-body\">\n            <p className=\"block\" data-cy=\"modal-title\">\n              {currentTodo.title}\n            </p>\n\n            <p className=\"block\" data-cy=\"modal-user\">\n              {currentTodo.completed ? (\n                <strong className=\"has-text-success\">Done</strong>\n              ) : (\n                <strong className=\"has-text-danger\">Planned</strong>\n              )}\n\n              {' by '}\n              <a\n                href={`mailto:${currentUser.email}`}\n              >\n                {currentUser.name}\n              </a>\n            </p>\n          </div>\n        </div>\n      ) : (\n        <Loader />\n\n      )}\n    </div>\n  );\n};\n","import React, { useEffect, useState } from 'react';\nimport 'bulma/css/bulma.css';\nimport '@fortawesome/fontawesome-free/css/all.css';\n\nimport { TodoList } from './components/TodoList';\nimport { TodoFilter } from './components/TodoFilter';\nimport { useAppDispatch, useAppSelector } from './app/hooks';\nimport { getTodos } from './api';\nimport { actions as todosActions } from './features/todos';\nimport { TodoModal } from './components/TodoModal';\nimport { Loader } from './components/Loader';\n\nexport const App: React.FC = () => {\n  const [isLoading, setIsLoading] = useState(false);\n  const currentTodo = useAppSelector(state => state.currentTodo);\n  const dispatch = useAppDispatch();\n\n  const getTodosFromServer = async () => {\n    try {\n      setIsLoading(true);\n      const todosFromServer = await getTodos();\n\n      dispatch(todosActions.setTodos(todosFromServer));\n    } catch (error) {\n      throw new Error('Failed to load todos');\n    } finally {\n      setIsLoading(false);\n    }\n  };\n\n  useEffect(() => {\n    getTodosFromServer();\n  }, []);\n\n  return (\n    <>\n      <div className=\"section\">\n        <div className=\"container\">\n          <div className=\"box\">\n            <div className=\"block\">\n              <TodoFilter />\n            </div>\n\n            {isLoading ? (\n              <Loader />\n            ) : (\n              <>\n                <h1 className=\"title\">Todos:</h1>\n                <div className=\"block\">\n                  <TodoList />\n                </div>\n              </>\n            )}\n          </div>\n        </div>\n      </div>\n      {currentTodo && <TodoModal />}\n    </>\n  );\n};\n","import ReactDOM from 'react-dom';\nimport { Provider } from 'react-redux';\nimport { HashRouter as Router } from 'react-router-dom';\n\nimport { store } from './app/store';\nimport { App } from './App';\n\n// Just a convenient component with all the wrappers for the `App`\n// The Router component (if you use it) should be placed inside the Provider\nconst Root = () => (\n  <Provider store={store}>\n    <Router>\n      <App />\n    </Router>\n  </Provider>\n);\n\nReactDOM.render(<Root />, document.getElementById('root'));\n"],"sourceRoot":""}